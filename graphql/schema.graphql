#scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    film(id: ID! @eq): Film @find

  me: User @auth
  films(
        title: String @where(key: "title", operator: "like")
        description: String @where(key: "description", operator: "like")
        duration: durationRange @whereBetween(key: "length")
        release_year: Int @where(key: "release_year", operator: ">=")
    ): [Film!] @paginate(defaultCount:10)
}

type Mutation {
  createActor(input: CreateActorInput! @spread): Actor! @canModel(ability: "create",policy: "App\\Policies\\ActorPolicy"
    ) @field(resolver: "CreateActor")
  createCritic(input: CreateCriticInput! @spread): Stat! @inject(context: "user.id", name: "user_id") @field(resolver: "CreateCritic")
}

input CreateActorBelongsTo{
    connect: ID!
    create: CreateActorInput
}

type Stat {
    id: ID!
    average_score: Float!
    total_votes: Float!
    film_id: Int!
}
input durationRange {
  from: Int!
  to: Int!
}

type User{
    id: ID!
    login: String!
    email: String!
    password: String!
    first_name: String!
    last_name: String!
    role_id: Int!
    critics: [Critic!] @hasMany
}

type Film {
    id: ID!
    title: String!
    release_year: Int!
    length: Int!
    description: String!
    rating: String!
    special_features: String!
    language_id: Int!
    image: String!
    critics: [Critic!] @hasMany
    actors: [Actor!] @belongsToMany
}

type Actor {
    id: ID!
    last_name: String!
    first_name: String!
    birthdate: String!
    films: [Film!] @belongsToMany
    connect: [Film!] @belongsToMany
}

type Language {
    id: ID!
    name: String!
}

type Critic {
    id: ID!
    score: Int!
    comment: String!
    user_id: Int!
    film_id: Int!
    #film: Film! @belongsTo
    #user: User! @belongsTo
}

input CreateActorInput {
    last_name: String!
    first_name: String!
    birthdate: String!
    films: [CreateFilmBelongsTo!] @belongsToMany
    films_images: [FilmImageInput!]
}

input FilmImageInput {
    film_id: ID!
    image: String!
}

input CreateFilmBelongsTo{
    connect: ID!
}

input CreateCriticInput {
    score: Float!
    comment: String!
    film_id: Int!
}




